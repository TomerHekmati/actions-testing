# This is a basic workflow that is manually triggered

name: Release workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    inputs:
      module_name:
        description: "Redis module name"
        required: true
        type: string
      module_version:
        description: "The module version"
        required: true
        type: string
      module_url:
        description: "URL to download the module"
        required: false
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    strategy:
      fail-fast: false
      matrix: 
        # cluster_version: ["100.0.0", "6.4.2", "6.4.0", "6.2.18", "6.2.12", "6.2.10", "6.2.8", "6.2.4", "6.0.20", "6.0.12", "6.0.8", "6.0.6"]
        cluster_version: ["100.0.0", "6.0.6"]
        # os: ['xenial', 'bionic', 'focal', 'rhel7', 'rhel8']
        os: ['xenial', 'focal']
    uses: ./.github/workflows/REUSABLE_RELEASE.yml
    with:
      os: ${{matrix.os}}
      cluster_version: ${{matrix.cluster_version}}
      module_name: ${{inputs.module_name}}
      module_version: ${{inputs.module_version}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    # steps:
#       # - name: Random supported OS choice
#       #   id: random_os
#       #   run: |
#       #     for i in bionic focal rhel7 rhel8 xenial; do echo $i; done | shuf|head -n 1 > oschoice.txt
#       # - name: Display OS choice
#       #   run: |
#       #     cat oschoice.txt
#       # - name: Display ls
#       #   run: |
#       #     ls;pwd
#       # - uses: actions/upload-artifact@v2
#       #   with:
#       #     name: oschoice.txt
#       #     path: oschoice.txt

#       - uses: actions/checkout@v3
#       # # this is the workaround to the maximum number of inputs for dispatch
#       # - name: configure dotenv
#       #   run: |
#       #     for i in `echo ${{inputs.module_options}}`; do
#       #       echo $i >> .env
#       #     done
#       #     echo "AWS_ACCESS_KEY=${{ secrets.CTO_AUTOMATION_AWS_ACCESS_KEY }}" >> .env
#       #     echo "AWS_SECRET_KEY=${{ secrets.CTO_AUTOMATION_AWS_SECRET_KEY }}" >> .env

#       - name: install python
#         uses: actions/setup-python@v4

#       # - name: cache
#       #   uses: actions/cache@v3
#       #   with:
#       #     key: baseline-${{ hashFiles('pyproject.toml') }}
#       #     path:
#       #       ~/.cache/pip
#       #       ~/.cache/pypoetry
#       - name: download lfs dependencies
#         uses: actions/checkout@v3
#         with:
#           lfs: true
#       - name: Checkout LFS objects
#         run: git lfs checkout

#       - name: invoke install
#         run: |
#           pip install --upgrade pip invoke
    
#       # Runs a single command using the runners shell
#       - name: Run the task
#         env:
#           REPO: ${{ github.repository }}
#           RUN_ID: ${{ github.run_id}}
#         run: |
#           invoke -c my_tasks set-permutations --module-name="${{ inputs.module_name }}" --module-version="${{ inputs.module_version }}" > oschoice
#         # invoke -c my_tasks set-permutations --module-name="${{ inputs.module_name }}" --module-version="${{ inputs.module_version }}" | shuf|head -n 1 > parameters_results.txt

#       # - uses: actions/upload-artifact@v2
#       #   id: os_list
#       #   with:
#       #     path: oschoice.txt

#       # - run: echo $OSCHOICE
#         # env:
#           # OSCHOICE: ${{ steps.os_list.oschoice.txt }}

#       # - name: Display OS choice
#       #   run: |
#       #     cat oschoice.txt

#       - name: Read OS file
#         id: os_list
#         run: echo "os=`cat oschoice`" >> $GITHUB_OUTPUT

#       - run: echo $OSCHOICE
#         env:
#           OSCHOICE: ${{ steps.os_list.outputs.os }}
      
#       - name: TEST TOMER Display each OS if
#         run: for i in ${{ steps.os_list.outputs.os }}; do echo $i; done 
# # from working repo: "OSCHOICE=`cat oschoice.txt`" >> $GITHUB_OUTPUT

# # worked! _> OSCHOICE: "I am tomer"
# # ${{ steps.os_list.outputs.oschoice }}
#       # - name: Set variables
#       #   run: |
#       #     echo "OS_LIST<<$(cat oschoice.txt)" >> $GITHUB_ENV

#       # - name: Check OS list
#       #   run: |
#       #     for i in ${{ env.OS_LIST}}; do echo $i; done

# # OS_LIST<<$(cat oschoice.txt)
# # echo "OS_LIST<<$(cat oschoice.txt)" >> $GITHUB_ENV

# # run: |
# #   echo Hello there
# #   cat parameters_results.txt
# #   echo "OSCHOICE=`cat parameters_results.txt`" >> $GITHUB_OUTPUT
# # invoke -c my_tasks set-permutations 
# # invoke -c my_tasks set-permutations --module-options="${{ inputs.module_options }}" --pytest-options="${{ inputs.pytest_options }}"
# # -r?

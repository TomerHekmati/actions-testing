# This is a basic workflow that is manually triggered

name: Release workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    inputs:
      module_name:
        description: "Redis module name"
        required: true
        type: string
      module_version:
        description: "The module version"
        required: true
        type: string
      module_url:
        description: "URL to download the module"
        required: false
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Random supported OS choice
        id: random_os
        run: |
          for i in bionic focal rhel7 rhel8 xenial; do echo $i; done | shuf|head -n 1 > oschoice.txt
      - name: Display OS choice
        run: |
          cat oschoice.txt

      - uses: actions/checkout@v3

      # # this is the workaround to the maximum number of inputs for dispatch
      # - name: configure dotenv
      #   run: |
      #     for i in `echo ${{inputs.module_options}}`; do
      #       echo $i >> .env
      #     done
      #     echo "AWS_ACCESS_KEY=${{ secrets.CTO_AUTOMATION_AWS_ACCESS_KEY }}" >> .env
      #     echo "AWS_SECRET_KEY=${{ secrets.CTO_AUTOMATION_AWS_SECRET_KEY }}" >> .env

      - name: install python
        uses: actions/setup-python@v4
      # - name: cache
      #   uses: actions/cache@v3
      #   with:
      #     key: baseline-${{ hashFiles('pyproject.toml') }}
      #     path:
      #       ~/.cache/pip
      #       ~/.cache/pypoetry
      - name: download lfs dependencies
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout

      - name: invoke install
        run: |
          pip install --upgrade pip invoke
    
      # Runs a single command using the runners shell
      - name: Run the task
        env:
          REPO: ${{ github.repository }}
          RUN_ID: ${{ github.run_id}}
        run: |
          invoke -c my_tasks set-permutations --module-name="${{ inputs.module_name }}" --module-version="${{ inputs.module_version }}" ; echo Hello there ; cat oschoice.txt
        # invoke -c my_tasks set-permutations --module-name="${{ inputs.module_name }}" --module-version="${{ inputs.module_version }}" | shuf|head -n 1 > parameters_results.txt
        # run: |
        #   echo Hello there
        #   cat parameters_results.txt
        #   echo "OSCHOICE=`cat parameters_results.txt`" >> $GITHUB_OUTPUT
# invoke -c my_tasks set-permutations 
# invoke -c my_tasks set-permutations --module-options="${{ inputs.module_options }}" --pytest-options="${{ inputs.pytest_options }}"
# -r?
